// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// CoxHessianHelper
NumericMatrix CoxHessianHelper(const NumericMatrix x, const NumericVector multiplier, const NumericVector eta, const IntegerVector order_b1, const IntegerVector rankmin_b1);
RcppExport SEXP _snpnet_CoxHessianHelper(SEXP xSEXP, SEXP multiplierSEXP, SEXP etaSEXP, SEXP order_b1SEXP, SEXP rankmin_b1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type multiplier(multiplierSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type order_b1(order_b1SEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type rankmin_b1(rankmin_b1SEXP);
    rcpp_result_gen = Rcpp::wrap(CoxHessianHelper(x, multiplier, eta, order_b1, rankmin_b1));
    return rcpp_result_gen;
END_RCPP
}
// eigenCrossProd
SEXP eigenCrossProd(const Eigen::Map<Eigen::MatrixXd> A);
RcppExport SEXP _snpnet_eigenCrossProd(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(eigenCrossProd(A));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_snpnet_CoxHessianHelper", (DL_FUNC) &_snpnet_CoxHessianHelper, 5},
    {"_snpnet_eigenCrossProd", (DL_FUNC) &_snpnet_eigenCrossProd, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_snpnet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
